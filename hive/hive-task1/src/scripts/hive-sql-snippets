## preparing hive tables
# connecting external table with hotel weather data backed up by filled kafka topic
CREATE EXTERNAL TABLE kafka_hotel_weather(hotelId string, name string, country string, city string, address string, avg_tmpr_f DOUBLE, avg_tmpr_c DOUBLE, wthr_date string, geohashPrecision int)
STORED BY 'org.apache.hadoop.hive.kafka.KafkaStorageHandler'
TBLPROPERTIES
  ("kafka.topic" = "kafkaHotelWeather2", "kafka.bootstrap.servers"="sandbox-hdp.hortonworks.com:6667", "kafka.replication-factor"="1", "kafka.partitions"="16");

# connecting external table with expedia data backed by hdfs
CREATE EXTERNAL TABLE hdfs_expedia(id bigint, date_time string, site_name int, posa_continent int, 
user_location_country int, user_location_region int, user_location_city int, orig_destination_distance double, 
user_id int, is_mobile int, is_package int, channel int, srch_ci string, srch_co string, srch_adults_cnt int, 
srch_children_cnt int, srch_rm_cnt int, srch_destination_id int, srch_destination_type_id int,hotel_id bigint)
STORED AS AVRO
LOCATION 'hdfs://sandbox-hdp.hortonworks.com/expedia';

## queries
# Join hotel/weather table with expedia table via Hive by hotel_id
SELECT he.*, khw.* from hdfs_expedia he
SELECT count(*) from hdfs_expedia he
JOIN kafka_hotel_weather khw
ON he.hotel_id = khw.hotelid
AND unix_timestamp(khw.wthr_date) >= unix_timestamp(he.srch_ci)
AND unix_timestamp(khw.wthr_date) <= unix_timestamp(he.srch_co);

CREATE TABLE expedia_hotel_weather AS
SELECT * from hdfs_expedia he
JOIN kafka_hotel_weather khw
ON he.hotel_id = khw.hotelid
AND unix_timestamp(khw.wthr_date) >= unix_timestamp(he.srch_ci)
AND unix_timestamp(khw.wthr_date) <= unix_timestamp(he.srch_co);

# Top 10 hotels with max absolute difference variance temperature by month
EXPLAIN FORMATTED SELECT tbl.name AS name, tbl.wthr_year AS year, tbl.wthr_month AS month, MAX(tbl.tmpr_diff) AS max_tmpr_diff FROM(
   SELECT name, wthr_year, wthr_month, ROUND(ABS(MAX(avg_tmpr_c) - MIN(avg_tmpr_c)), 2) AS tmpr_diff 
   FROM hotel_weather 
   GROUP BY name, wthr_year, wthr_month
) tbl
GROUP BY tbl.name, tbl.wthr_year, tbl.wthr_month
ORDER BY MAX(tbl.tmpr_diff) DESC
LIMIT 10;

# Top 10 busy (e.g. with the biggest visits count) hotels for each month. 
# If visit dates refer to several months it should be counted for all affected months.
select tbl.hotel_id,tbl.year,month,count(*) as cnt from (
select t.hotel_id, year(add_months(t.srch_ci,pe.i)) as year, month(add_months(t.srch_ci,pe.i)) as month
from hdfs_expedia t
lateral view 
posexplode(split(space((cast(year(t.srch_co) as int) - cast(year(t.srch_ci) as int) ) * 12 +  (cast(month(t.srch_co) as int) - cast(month(t.srch_ci) as int))),' ')) pe as i, x
) tbl
group by hotel_id,year,month
order by cnt desc
limit 10;

# For visits with extended stay (more than 7 days) 
# calculate weather trend (the day temperature difference between last and first day of stay)
# and average temperature during stay.



select id,hotel_id,srch_ci,srch_co from hdfs_expedia 
where id = 251952 and hotel_id = 455266533382
limit 10;
where id = 251952 and hotel_id = 455266533382
where id = 18 and hotel_id = 2826088480774
datediff(t.srch_co,t.srch_ci)
abs(cast(months_between(t.srch_co,t.srch_ci)as int))
(cast(year(t.srch_co) as int) - cast(year(t.srch_ci) as int) )*12 +  (cast(month(t.srch_co) as int) - cast(month(t.srch_ci) as int))

SELECT tbl.hotel_id, COUNT(*) as visit_count FROM (
SELECT hotel_id, MONTH(date_time) as visit_month FROM hdfs_expedia
) tbl
GROUP BY tbl.hotel_id
ORDER BY visit_count DESC
LIMIT 10;

## can extract same/diff month visits
## year
1. select year, month distinct
2. select year, month of visit 

# For visits with extended stay (more than 7 days) 
# average temperature during stay.
select t1.id, t1.user_id, t1.hotel_id, 
ROUND(AVG(t2.avg_tmpr_c), 1) as avg_tmpr, 
t3.tmpr_diff as tmpr_diff
FROM (SELECT t.id, t.user_id, t.hotel_id, date_add(t.srch_ci,pe.i) as visit_date
FROM hdfs_expedia t
lateral view
posexplode(split(space(datediff(t.srch_co,t.srch_ci)),' ')) pe as i,x
WHERE datediff(to_date(t.srch_co), to_date(t.srch_ci)) > 7
) t1
JOIN kafka_hotel_weather t2
ON t1.hotel_id = t2.hotelid
AND t1.visit_date = t2.wthr_date
JOIN (
SELECT tt1.id, ROUND((tt2.avg_tmpr - tt3.avg_tmpr), 1) as tmpr_diff
FROM hdfs_expedia tt1
JOIN hotel_weather tt2
ON tt1.hotel_id = tt2.hotelid
AND tt1.srch_co = tt2.wthr_date
JOIN hotel_weather tt3
ON tt1.hotel_id = tt3.hotelid
AND tt1.srch_ci = tt3.wthr_date
) t3
ON t1.id = t3.id
GROUP BY t1.id,t1.user_id,t1.hotel_id,t3.tmpr_diff;

###
CREATE VIEW IF NOT EXISTS stay_tmpr_diff as
SELECT tt1.id, ROUND((tt2.avg_tmpr - tt3.avg_tmpr), 1) as tmpr_diff
FROM hdfs_expedia tt1
JOIN hotel_weather tt2
ON tt1.hotel_id = tt2.hotelid
AND tt1.srch_co = tt2.wthr_date
JOIN hotel_weather tt3
ON tt1.hotel_id = tt3.hotelid
AND tt1.srch_ci = tt3.wthr_date;
###

# calculate weather trend (the day temperature difference between last and first day of stay) 
SELECT tt1.id, ROUND((tt2.avg_tmpr_c - tt3.avg_tmpr_c), 1) as tmpr_diff
FROM hdfs_expedia tt1
JOIN kafka_hotel_weather tt2
ON tt1.hotel_id = tt2.hotelid
AND tt1.srch_co = tt2.wthr_date
JOIN kafka_hotel_weather tt3
ON tt1.hotel_id = tt3.hotelid
AND tt1.srch_ci = tt3.wthr_date

SELECT user_id,hotel_id,srch_ci,srch_co,AVG(avg_tmpr_c) AS avg_stay_tmpr from expedia_hotel_weather
WHERE datediff(to_date(srch_co), to_date(srch_ci)) > 7
GORUP BY user_id,hotel_id;
